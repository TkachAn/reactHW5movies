{"version":3,"file":"static/js/Search.b53f92ca.chunk.js","mappings":"4MACA,EAAwB,sBAAxB,EAAqD,qBAArD,EAAiF,qBAAjF,EAA8G,sBAA9G,EAA0I,oB,SCIpIA,GAAOC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IACH,SAASC,IACtB,OAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAA8BN,EAAAA,EAAAA,WAAS,GAAvC,eAAOO,EAAP,KAAgBC,EAAhB,KACA,GAAkCR,EAAAA,EAAAA,UAAS,IAA3C,eAAOS,EAAP,KAAkBC,EAAlB,MACAC,EAAAA,EAAAA,MAAcC,OAAST,EACvB,IAAMU,GAAWF,EAAAA,EAAAA,OAIjBG,EAAAA,EAAAA,YAAU,WACR,GAAKX,EAAL,CAGEK,GAAW,IACXO,EAAAA,EAAAA,IAAcZ,GACXa,MAAK,SAAAC,GACJf,EAAgBe,EACjB,IACAC,OAAM,SAAAb,GACLC,EAAS,gBAAD,OAAiBD,EAAjB,UACT,IACAc,QAAQX,GAAW,GAXN,CAenB,GAAE,CAACL,IAiBJ,OACE,+BACE,6BACE,iBAAKiB,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,qBACA,kBAAMC,SAfG,SAAAC,GACfA,EAAEC,iBACuB,KAArBf,EAAUgB,QACZC,MAAM,wBAEJjB,GACFL,EAASK,EAEZ,EAOiCW,UAAWC,EAArC,WACE,kBACED,UAAWC,EACXM,KAAK,OACLC,MAAOnB,EACPoB,KAAK,OACLC,SA1BS,SAAAP,GACnB,IAAQK,EAAUL,EAAEQ,cAAZH,MACRlB,EAAakB,EACd,EAwBWI,YAAY,8BACZC,aAAa,MACbC,WAAS,KAEX,mBAAQd,UAAWC,EAASM,KAAK,kBAGrC,UAAC,EAAAQ,SAAD,CAAUC,UAAU,uCAApB,UACG7B,IAAW,uCACXN,EAAaoC,OAAS,IACrB,SAACxC,EAAD,CAAMyC,OAAQrC,EAAcsC,MAAO,CAAEC,KAAM3B,EAAS4B,eAGvDpC,IAAS,yBAAuBA,QAIxC,C","sources":["webpack://reactHW5movies/./src/pages/search/search.module.css?9162","pages/search/search.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"search_title__kpGJq\",\"flex\":\"search_flex__1WQ5m\",\"form\":\"search_form__j65Hf\",\"input\":\"search_input__xTTqk\",\"btn\":\"search_btn__MaPLA\"};","import { useLocation } from 'react-router-dom';\nimport { useState, useEffect, Suspense, lazy } from 'react';\nimport { apiTMDbSearch } from '../../TMBD/API';\nimport css from './search.module.css';\n// import { List } from 'components/moviesList/moviesList';\nconst List = lazy(() => import('components/moviesList/moviesList'));\nexport default function Search() {\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [query, setQuery] = useState(''); //query ? query :\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [queryForm, setQueryForm] = useState('');\n  useLocation().search = query;\n  const location = useLocation();\n\n  // const state = { from: location.pathname };\n  // console.log(state);\n  useEffect(() => {\n    if (!query) return;\n\n    const fetchTMBd = () => {\n      setLoading(true);\n      apiTMDbSearch(query)\n        .then(res => {\n          setSearchMovies(res);\n        })\n        .catch(error => {\n          setError(`UPS, this is ${error}Search`);\n        })\n        .finally(setLoading(false));\n    };\n\n    fetchTMBd();\n  }, [query]);\n\n  const handleChange = e => {\n    const { value } = e.currentTarget;\n    setQueryForm(value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    if (queryForm.trim() === '') {\n      alert('Enter the film title');\n    }\n    if (queryForm) {\n      setQuery(queryForm);\n    }\n  };\n\n  return (\n    <>\n      <main>\n        <div className={css.flex}>\n          <h2 className={css.title}>Search</h2>\n          <form onSubmit={onSubmit} className={css.form}>\n            <input\n              className={css.input}\n              type=\"text\"\n              value={queryForm}\n              name=\"page\"\n              onChange={handleChange}\n              placeholder=\"enter your request, please.\"\n              autoComplete=\"off\"\n              autoFocus\n            />\n            <button className={css.btn} type=\"submit\"></button>\n          </form>\n        </div>\n        <Suspense fallback={<h3>LOADING...</h3>}>\n          {loading && <h3>LOADING...</h3>}\n          {searchMovies.length > 0 && (\n            <List movies={searchMovies} state={{ from: location.pathname }} />\n          )}\n        </Suspense>\n        {error && <div>{('error_Search', error)}</div>}\n      </main>\n    </>\n  );\n}\n//state={{ from: location.pathname }}\n"],"names":["List","lazy","Search","useState","searchMovies","setSearchMovies","query","setQuery","error","setError","loading","setLoading","queryForm","setQueryForm","useLocation","search","location","useEffect","apiTMDbSearch","then","res","catch","finally","className","css","onSubmit","e","preventDefault","trim","alert","type","value","name","onChange","currentTarget","placeholder","autoComplete","autoFocus","Suspense","fallback","length","movies","state","from","pathname"],"sourceRoot":""}